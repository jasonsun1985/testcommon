package com.tec.pattern.principle.lsp;

/**
  可以理解为一个软件实体如果适用一个父类的话，那一定是适用于其子类
     1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
     2.子类中可以增加自己特有的方法。
     3.当子类的方法重载父类的方法时，方法的前置条件(即方法的输入/入参)要比父类 方法的输入参数更宽松。
     4.当子类的方法实现父类的方法时(重写/重载或实现抽象方法)，方法的后置条件(即 方法的输出/返回值)要比父类更严格或相等。
 */
public class LSP {
    //鲸鱼类去继承鱼类，就完全违背了Liskov替换原则,因为鱼作为父类，很多特性是鲸鱼所不具备的，例如通过腮呼吸，以及卵生繁殖。那么，二者是否具有共性呢？有，那就是它们都可以在水中"游泳"，从程序设计的角度来说，它们都共同实现了一个支持"游泳"行为的接口。

}
